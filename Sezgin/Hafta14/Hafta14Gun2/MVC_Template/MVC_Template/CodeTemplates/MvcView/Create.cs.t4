<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
#>

@{
    ViewBag.Title = "<#= ViewName#>";
}

<div class="row">
	<div class="col-md-12">
        <div class="block">
            <div class="block-heading">
                <div class="main-text h2">
                    @ViewBag.ControllerName <#= ViewName#> Ekranı
                </div>
                <div class="block-controls">
                    <a href="/@ViewBag.ControllerName/Index"><span aria-hidden="true" class="icon icon-cross icon-size-medium block-control-remove"></span></a>
                    <span aria-hidden="true" class="icon icon-arrow-down icon-size-medium block-control-collapse"></span>
                </div>
            </div>
            <div class="block-content-outer">
                <div class="block-content-inner">
					@using (Html.BeginForm()) 
					{
						@Html.AntiForgeryToken()
    
						<div class="form-group">
					<# 
						if (isControlHtmlAttributesSupported) {
					#>
							@Html.ValidationSummary(true, "", new { @class = "text-danger" })
					<#        
						} else {
					#>
							@Html.ValidationSummary(true)
					<#      
						}
					#>
						</div>
					<#
					foreach (PropertyMetadata property in ModelMetadata.Properties) {
						if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

							// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
							if (property.IsPrimaryKey && IsPropertyGuid(property)) {
								continue;
							}

					#>
							<div class="form-group">
					<#
							if (property.IsForeignKey) {
					#>
								@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>")
					<#
							} else {
					#>
								@Html.LabelFor(model => model.<#= property.PropertyName #>)
					<#
							}
					#>
					<#
							bool isCheckbox = property.TypeName.Equals(boolType);
							if (property.IsForeignKey) {
					#>
					<# 
								if (isControlHtmlAttributesSupported) {
					#>
									@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
					<#
								} else {
					#>
									@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
					<#
								}
					#>
					<#
							} else  if (isControlHtmlAttributesSupported) {
								if (isCheckbox) {
					#>
									<div class="checkbox">
					<#
									PushIndent("    ");
					#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>)
					<#
								} else if (property.IsEnum && !property.IsEnumFlags) {
					#>
									@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
					<#
								} else {
					#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control rounded" } })
					<#
								} 
							} else {
					#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>)
					<#
							}
					#>
					<# 
							if (isControlHtmlAttributesSupported) {
					#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
					<#        
							} else {
					#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
					<#      
							}
					#>
					<#
							if (isCheckbox && isControlHtmlAttributesSupported) {
								PopIndent();
					#>
									</div>
					<#
							}
					#>
								</div>

					<#
						}
					}
					#>
							<div class="form-group">
								<button type="submit" class="btn btn-primary rounded">OLUŞTUR</button>
							</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>